open Source_map

let json t =
  `Assoc [
     "version",       `Float  (float_of_int t.version);
     "file",          `String t.file;
     "sourceRoot",    `String (match t.sourceroot with None -> "" | Some s -> s);
     "names",         `List (List.map (fun s -> `String s) t.names);
     "mappings",      `String (string_of_mapping t.mappings);
     "sources",       `List (List.map (fun s -> `String s) t.sources);
     "sourcesContent",`List
		     (match t.sources_content with
		      | None -> []
		      | Some l ->
			 List.map
			   (function
			     | None -> `Null
			     | Some s -> `String s) l);
  ]

let invalid () = invalid_arg "Source_map.of_json"

let string name rest =
  try
    match List.assoc name rest with
    | `String s -> Some s
    | `Null -> None
    | _ -> invalid ()
  with Not_found -> None

let list_string name rest =
  try
    match List.assoc name rest with
    | `List l -> Some (
      List.map (function
        | `String s -> s
        | _ -> invalid ()) l)
    | _ -> invalid ()
  with Not_found -> None

let list_string_opt name rest =
  try
    match List.assoc name rest with
    | `List l -> Some (List.map (function
      | `String s -> Some s
      | `Null     -> None
      | _         -> invalid ()) l)
    | _ -> invalid ()
  with Not_found -> None


let of_json json =
  match json with
  | `Assoc (("version", `Float version)
        :: rest) when int_of_float version = 3 ->
    let def v d =
      match v with None -> d | Some v -> v
    in
    let file = string "file" rest in
    let sourceroot = string "sourceRoot" rest in
    let names = list_string "names" rest in
    let sources = list_string "sources" rest in
    let sources_content = list_string_opt "sourcesContent" rest in
    let mappings = string "mappings" rest in
    { version = int_of_float version;
      file = def file "";
      sourceroot;
      names = def names [];
      sources_content = sources_content;
      sources = def sources [];
      mappings = mapping_of_string (def mappings "");
    }
  | _ -> invalid ()

let of_string s =
  of_json (Yojson.Basic.from_string s)

let to_string m =
  Yojson.Basic.to_string (json m)

let to_file m file =
  Yojson.Basic.to_file file (json m)

let enabled = true
