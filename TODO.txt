
- generate caml_call_N functions... (with short names when possible...)
- compilation of "try ... with ..."
- problem with tail calls (too deep)
- more compact switches
  ==> group cases by continuation
  ==> the case with most continuations is the default

IMPROVEMENTS
============

- We only have to make sure we do not use a
  reserved word not a function used outside for naming variables
  ===> very short variable names
  ===> Bloom filter???

- Compile to CPS + trampoline
  ==> Store exception continuation in a global datastructure
  ==> cheap trampoline: return fun () {...}


- Improved inlining of local functions
  ==> while loops when possible

- Map Caml objects to Javascript objects
- Dynamic loading

DATA REPRESENTATION
===================
- correct implementation of strings
- should probably wrap Ocaml exceptions...

DATA ANALYSIS
=============
- correct analysis (side-effects...)
- faster algorithm
- interprocedural analysis

COMPRESSION OPTIMIZATION
========================
- http://timepedia.blogspot.com/2009/08/on-reducing-size-of-compressed.html
  http://timepedia.blogspot.com/2009/11/traveling-salesman-problem-and.html
  ==> order functions by similarity
  ==> try to always use the same arguments for functions
  ==> 7-zip is better at compressing than gzip, with the same algorithm...
- we can remove some whitespaces but we have to look at the context...

================================

function encode_utf8( s )
{
  return unescape( encodeURIComponent( s ) );
}

function decode_utf8( s )
{
  return decodeURIComponent( escape( s ) );
}
